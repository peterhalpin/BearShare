% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cIRF_functions.R
\name{est_RSC2}
\alias{est_RSC2}
\title{Estimation of the one-parameter RSC model, with latent traits assumed to be known.}
\usage{
est_RSC2(resp, parms, theta1, theta2, method = "MAP", obs = F,
  epsilon = 0.05, parallel = F)
}
\arguments{
\item{resp}{a matrix or data.frame containing the (conjunctively-scored) binary item responses.}

\item{parms}{a named list or data.frame with elements \code{parms$alpha} and \code{parms$beta} corresponding to the discrimination and difficulty parameters of the 2PL model, respectively.}

\item{theta1}{the latent trait of member 1.}

\item{theta2}{the latent trait of member 2.}

\item{method}{one of \code{c("ML", "MAP")}. The latter is strongly recommended.}

\item{obs}{logical: should standard errors be computed using the observed (\code{TRUE}) or expected (\code{FALSE}) Fisher information?}

\item{epsilon}{a small positive number, see description for details.}

\item{parallel}{logical: call \code{parallel:mclapply} instead of looping over \code{nrow(resp)}?}
}
\value{
An named \code{nrow(resp)} by 3 data.frame containing the estimates, their standard errors, and the value of the log-likelihood of the RSC model at the solution (not log posterior with MAP).
}
\description{
This function calls \code{optim} to estimate the one-parameter RSC model from the (conjunctively-scored) repsonses of dyads to a group assessment.
}
\details{
Estimation is via either maximum likelihood (ML) or modal a'posteriori (MAP), with the latter being prefered. For MAP, a two-parameter Beta prior is used with the parameter of the RSC model, in which both parameters are equal to \code{1 + epsilon}. Standard errors (or posterior standard deviations) are computed via the inverse of the analytically computed second derivatives of the objective function, at the parameter estimates. The value of the objective function at the estimate is is also provided. If \code{parallel = T}, the call to \code{optim} is parallelized via \code{parallel::mclapply}.
}
